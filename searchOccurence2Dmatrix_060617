"""
https://www.lintcode.com/en/problem/search-a-2d-matrix-ii/
Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.
This matrix has the following properties:
Integers in each row are sorted from left to right.
Integers in each column are sorted from up to bottom.
No duplicate integers in each row or column.
[
  [1, 3, 5, 7],
  [2, 4, 7, 8],
  [3, 5, 9, 10]
]
target = 3
return 2
"""
class Solution:
    """
    @param matrix: An list of lists of integers
    @param target: An integer you want to search in matrix
    @return: An integer indicates the total occurrence of target in the given matrix
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        if not matrix:
            return 0
        if not target:
            return None
        occur = 0
        i = 0 
        j = len(matrix[0]) - 1
        while i < len(matrix) and j >= 0:
            if matrix[i][j] == target: 
                occur += 1
                i += 1
                j = len(matrix[0]) - 1
            elif matrix[i][j] > target: 
                j -= 1
            else: 
                i += 1
        return occur
