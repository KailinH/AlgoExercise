"""
Source:http://www.lintcode.com/en/problem/search-range-in-binary-search-tree/
In-order traversal to get ascending list, use helper function
"""
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:
    """
    @param root: The root of the binary search tree.
    @param k1 and k2: range k1 to k2.
    @return: Return all keys that k1<=key<=k2 in ascending order.
    """     
    def searchRange(self, root, k1, k2):
        # write your code here
        # insce it's in ascending order, we want in order traversal
        result = []
        self.inorderTraversal_helper(root,k1,k2,result)
        return result
    
    def inorderTraversal_helper(self,root,k1,k2,result):
        if not root:
            return []
        if root.left and root.val > k1:
            self.inorderTraversal_helper(root.left, k1, k2,result)
        if k1 <= root.val <= k2:
            result.append(root.val)
        if root.right and root.val < k2:
            self.inorderTraversal_helper(root.right, k1, k2,result)
