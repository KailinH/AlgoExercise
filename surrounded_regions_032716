"""
Source:http://www.lintcode.com/en/problem/surrounded-regions/
BFS
"""
class Solution:
    # @param {list[list[str]]} board a 2D board containing 'X' and 'O'
    # @return nothing 
    def valid_neighbors(self,i,j, board):
        nbds = []
        row = len(board)
        col = len(board[0])
        rowNbr = [-1, 0, 0, 1];
        colNbr = [ 0, -1, 1, 0]
        for k in range(4):
            r, c = i+rowNbr[k], j+colNbr[k]
            if (0<=r<row and 0<=c<col) and board[r][c]=='O':
                   nbds.append([r,c])
        return nbds
        
    def bfs(self, queue, visited, board):
        while queue:
            i,j = queue.pop(0)
            visited[i][j] = True
            neighbors = self.valid_neighbors(i,j,board)
            for r,c in neighbors:
                if visited[r][c] == False:
                    visited[r][c] = True
                    queue.append([r,c])
        return visited   
    def surroundedRegions(self, board):
        # Write your code here
        if not board:
            return None
        row = len(board)
        col = len(board[0])
        visited = [[False for i in range(col)] for j in range(row)]
        queue = []
        for i in (0,row-1):
            for j in range(col):
                if visited[i][j] == False and board[i][j] == 'O':
                    queue.append([i,j])
                    visited = self.bfs(queue, visited, board)
                
        for j in (0,col-1):
            for i in range(row):
                if visited[i][j] == False and board[i][j] == 'O':
                    queue.append([i,j])
                    visited = self.bfs(queue, visited, board)
                    
        for i in range(1,row-1):
            for j in range(1, col-1):
                if visited[i][j] == False and board[i][j] == 'O':
                    board[i][j] = 'X'
        return board
