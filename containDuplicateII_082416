"""
Source:
"""
"""Naive Solution, nested loop"""
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if len(nums)<2:
            return False
        if len(nums)==2:
            if nums[0]==nums[1]:
                return True
            else:
                return False
        for i in range(len(nums)-1):
            for j in range(1,k+1):
                if i+j<len(nums):
                    if nums[i]==nums[i+j]:
                        return True
        return False

"""Smarter Way, reduce time complexity"""
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if len(nums)<=k:
            if len(nums)>len(set(nums)):
                return True
            else:
                return False
        else:
            if len(nums)==len(set(nums)):
                return False
            for i in range(0,len(nums)-k):
                subnums = nums[i:i+k+1]
                if len(subnums)>len(set(subnums)):
                    return True
            return False

"""An even smarter way, since now we don't create a new list each iteration"""
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if len(nums)<=k:
            if len(nums)>len(set(nums)):
                return True
            else:
                return False
        else:
            if len(nums)==len(set(nums)):
                return False
            subnums = nums[0:(k+1)]
            i=0
            while k+1+i<len(nums):
                if len(subnums)>len(set(subnums)):
                    return True
                del subnums[0]
                subnums.append(nums[k+1+i])
                i+=1
            return False
