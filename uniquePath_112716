"""
Source:http://www.lintcode.com/en/problem/unique-paths/
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?
"""
class Solution:
    """
    @param n and m: positive integer(1 <= n , m <= 100)
    @return an integer
    """ 
    def uniquePaths(self, m, n):
        # write your code here
        unip = [[0 for y in range(n)] for x in range(m)]
        unip[0][0] = 1
        for i in range(m):
            for j in range(n):
                if i > 0 and j == 0:
                    unip[i][j] = unip[i-1][j] 
                elif j > 0 and i == 0:
                    unip[i][j] = unip[i][j-1] 
                elif i > 0 and j > 0:
                    unip[i][j] = unip[i-1][j] + unip[i][j-1]
        return unip[m-1][n-1]
