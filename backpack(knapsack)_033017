"""
Source:http://www.lintcode.com/en/problem/backpack/
Dynamic programming, initialize a 2-d tables first
"""
class Solution:
    # @param m: An integer m denotes the size of a backpack
    # @param A & V: Given n items with size A[i] and value V[i]
    # @return: The maximum value
    def backPackII(self, m, A, V):
        # write your code here
        D = [[0 for i in range(m+1)] for j in range(len(A)+1)]
        for i in range(1,len(A)+1):
            for j in range(1,m+1):
                if A[i-1] <= j:
                    D[i][j] = max(V[i-1]+D[i-1][j-A[i-1]], D[i-1][j])
                else:
                    D[i][j] = D[i-1][j]
        return D[-1][-1]
