"""
Classic unbounded knapsack problem
Source:
Dynamic programming, memoization, bottom-up
"""
def max_duffel_bag_value(cake_tuples, weight_capacity):
    max_values_at_capacities = [0]*(weight_capacity+1)
    for i in range(1,weight_capacity+1):
        for j in range(1,len(cake_tuples)+1):
            if cake_tuples[j-1][0] <= i: 
              #max() function compare which cake gives us maximum value
                max_values_at_capacities[i] = max(max_values_at_capacities[i],
                                                  cake_tuples[j-1][1] + max_values_at_capacities[i-cake_tuples[j-1][0]])
            # if we can't take the cake, value doesn't change
            else: 
                max_values_at_capacities[i] = max_values_at_capacities[i-1]
    return max_values_at_capacities[-1]
cake_tuples = [(7,160),(3,90),(2,15)]
max_duffel_bag_value(cake_tuples, 20) # got 555
