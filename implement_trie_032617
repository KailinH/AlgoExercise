"""
Source:https://leetcode.com/problems/implement-trie-prefix-tree/#/description
Implement a trie with python nested dictionaries
"""
class Trie(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root_node = {} #use nested dictionary
        

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        current = self.root_node
        for char in word:
            if char not in current:
                current[char] = {}
            current = current[char]
        current["End Of Word"] = {}    

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        is_present = False
        current = self.root_node
        for char in word:
            if char not in current:
                return is_present
            else:
                current = current[char]
        if "End Of Word" in current:
            return True
        return is_present
        
    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        is_present = False
        current = self.root_node
        for l in prefix:
            if l not in current:
                return is_present
            current = current[l]
        for item in current:
            if item != 'End of Word':
                return True
            else:
                return False
        
# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
