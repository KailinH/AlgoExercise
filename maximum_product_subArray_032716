"""
Source: http://www.lintcode.com/en/problem/maximum-product-subarray/
Dynamic programming
"""
class Solution:
    # @param nums: an integer[]
    # @return: an integer
    def maxProduct(self, nums):
        # write your code here
        max_so_far = nums[0]
        curr_max = nums[0]
        curr_min = nums[0]
        for i in range(1,len(nums)):
            temp = curr_max # save the value to temp because it will soon be altered
            curr_max = max(nums[i], curr_max*nums[i], curr_min*nums[i]) # consider the three possibilities
            curr_min = min(nums[i], temp*nums[i], curr_min*nums[i])
            max_so_far = max(max_so_far, curr_max)
        return max_so_far
