"""
Source:
"""
 ### brute force, two pointers method that doesn't have the best time complexity ###
 class Solution:
    # @param {int[]} nums1 an integer array
    # @param {int[]} nums2 an integer array
    # @return {int[]} an integer array
    def intersection(self, nums1, nums2):
        # Write your code here
        if not nums1 or not nums2:
            return []
        ans = []
        front = 0
        end = 0
        for n in nums1:
            while end < len(nums2) and n != nums2[end]:
                    end += 1
            if end < len(nums2) and n == nums2[end]:
                ans.append(n)
                del nums2[end]
            end = 0  
        return ans
 
 ### faster, hash table ###
 
  def intersection(self, nums1, nums2):
        # Write your code here
        if not nums1 or not nums2:
            return []
        counts = collections.Counter(nums1)
        result = []

        for num in nums2:
            if counts[num] > 0:
                result.append(num)
                counts[num] -= 1

        return result
