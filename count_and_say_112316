"""
Source: Lintcode
The count-and-say sequence is the sequence of integers beginning as follows:

1, 11, 21, 1211, 111221, ...

1 is read off as "one 1" or 11.

11 is read off as "two 1s" or 21.

21 is read off as "one 2, then one 1" or 1211.

Given an integer n, generate the nth sequence.
"""
class Solution:
    # @param {int} n the nth
    # @return {string} the nth sequence
    def countAndSay(self, n):
        # Write your code here
        seq = []
        seq.append('1')
        seq.append('11')
        seq.append('21')
        if n <= 3:
            return seq[n-1]
        current = 4
        while current <= n:
            s = seq[-1]
            new_string = ''
            count = 1
            for i in range(1,len(s)):
                if s[i-1] == s[i]:
                    count += 1
                else:
                    new_string = new_string + str(count) + s[i-1]
                    count = 1
            if s[-1] != s[-2]:
                    new_string = new_string + str(1) + s[-1]
            else:
                    new_string = new_string + str(count) + s[-1]
            #new_string = new_string + str(count) + s[-1]       
            seq.append(new_string)
            current += 1
        return seq[-1]
