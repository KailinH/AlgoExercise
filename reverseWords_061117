"""
given an array of characters arr that consists of sequences of characters separated by space characters. 
Each space-delimited sequence of characters defines a word.
Implement a function reverseWords that reverses the order of the words in the array in the most efficient manner.
"""
##a naive, space consuming solution
def reverseWords(arr):
    if not arr:
      return None
    parts = []
    cur = []
    for e in arr:
      if e != ' ':
        cur.append(e)
      elif e == ' ':
        parts.append(cur)
        parts.append([' '])
        cur = []
    parts.append(cur)
    print(parts)
    for i in range(len(parts)//2):
      parts[i], parts[-(i+1)] = parts[-(i+1)], parts[i] 
    res = parts[0]
    for i in range(1,len(parts)):
      res += parts[i]
    return res
test_0 = [ 'p', 'e', 'r', 'f', 'e', 'c', 't', ' ',
           'm', 'a', 'k', 'e', 's', ' ',
           'p', 'r', 'a', 'c', 't', 'i', 'c', 'e' ]
print(test_0)
print(reverseWords(test_0))

## a smarter solution, constant space, modularize code
def mirror_word(arr, start, end):
    while end > start:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1
    return 
  
def reverseWords(arr):
    arr = list(reversed(arr))
    start = 0
    for i in range(len(arr)):
        if arr[i] ==  ' ':
            mirror_word(arr, start, i-1)
            start = i+1
    mirror_word(arr, start, len(arr)-1)
    return arr

